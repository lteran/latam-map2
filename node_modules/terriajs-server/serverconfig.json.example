{
    // Port to listen on. Overriden by the --port command line setting.
    port: 3001,

    // List of domains which the server is willing to proxy for. Subdomains are included automatically.
    allowProxyFor : [
        "nicta.com.au",
        "gov.au",
        "csiro.au"
    ],

    // If this setting is true, the allowProxyFor list is ignored, and all requests are accepted.
    proxyAllDomains: false,

    // The largest size, in bytes, of data that the proxy will send in a POST request
    proxyPostSizeLimit: 102400,

    // The largest size, in bytes, of files we will convert using OGR2OGR. Defaults to 1000000
    maxConversionSize: 1000000,

    // List of directories where init (catalog) files will be sought, before defaulting to wwwroot/init. This helps with managing catalog files
    // separately from the main codebase.
    initPaths: [ "../randominits" ],

    // Pass requests through to another proxy upstream.
    upstreamProxy: "proxy.example.com",

    // Hosts in this list will not be passed through to the upstream proxy.
    bypassUpstreamProxyFor: [
      "server.example.com"
    ],

    // List of URLs and parameters to request tokens.
    // Be careful using this configuration as this configuration effectively currently opens up access to these services and allows anyone to
    // anonymously mint tokens for the specified server using these credentials.
    "esriTokenAuth": {
        "postSizeLimit": 1024,
        "servers": {
            "https://example.com/somelayer": {
                "username": "myusername",
                "password": "mypassword",
                "tokenUrl": "https://example.com/tokens/generateToken"
            }
        }
    }

    // Enables and configures the feedback service.  This service accepts posted JSON like:
    //   {
    //       "name":"My Name",
    //       "email":"myemail@example.com",
    //       "comment":"This thing is so great! yeah!"
    //   }
    // And creates a GitHub issue based on the feedback.
    feedback: {
        userAgent: "TerriaBot (TerriaJS Feedback)",
        issuesUrl: "https://api.github.com/repos/TerriaJS/NationalMap-Feedback/issues",
        accessToken: "provide your GitHub access token here"
    },

    // The value of the Express "trust proxy" application setting. Set this to true if you want to provide publicly usable URLs behind a reverse proxy
    // See http://expressjs.com/en/api.html#trust.proxy.options.table
    trustProxy: false,

    // Add very simple HTTP basic authentication with a single username/password for all users.
    // All services are authenticated except /ping.
    basicAuthentication: {
        username: "myusername",
        password: "mypassword"
    },
    // Services for creating and/or resolving share URLs (or rather, the JSON that is stored in some service)
    // A prefix of "foo" translates to a URL like "nationalmap.gov.au/#share=foo-12345" where 12345 is the actual
    // unique key generated by the service.
    shareUrlPrefixes: {
        // A blank prefix resolves without the separator: .../#share=12345
        "": {
            service: "googleUrlShortener",
            apikey: "Your Google API key goes here"

        },
        "s": {
            "service": "s3",
            // Required: the AWS region to access
            "region": "us-west-2",

            // Required: an existing S3 bucket in which to store objects
            "bucket": "terria-sharedata"

            // Optional: The access key ID and secret access key of a user with S3 getObject and putObject permission on the above bucket
            // If not provided here, you must ensure they're available as environment variables or in a shared credentials file.
            // See http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html
            "accessKeyId": "ABC123",
            "secretAccessKey": "abc+123-XYZ",

            // Optional: The length of the random share key to generate (not including prefix), up to 54 characters. Defaults to the full length.
            "keyLength": 16
        },
        "g": {
            service: "gist",
            // Optional: your Github access token with Gist creation privileges. If not supplied, all Gists will be created as "anonymous" and lower
            // usage limits apply
            // accessToken: "ABC123",

            // Optional: user agent HTTP Header to set
            userAgent: "My service",
            // Optional: The filename to give to the gist file (default: usercatalog.json)
            gistFilename:  "usercatalog.json",
            // Optional: The description attached to each Gist
            gistDescription: "User catalog"
        }
    },
    // Which service (of those defined above) should be used when new URLs are requested.
    newShareUrlPrefix: "g",

    // The domain at which you're running the server. Mostly used for describing the available endpoints. Defaults to "localhost"
    hostName: 'example.com',

    // Optional: Run TerriaJS-Server in HTTPS mode. (In production, it's probably better to use Nginx or something to do the HTTPS bit.)
    https: {
        // Name and location of keys. You can make self-signed certs for testing like:
        // openssl req -nodes -new -x509 -keyout key.pem -out cert.pem
        key: 'key.pem',
        cert: 'cert.pem'
    }
}
